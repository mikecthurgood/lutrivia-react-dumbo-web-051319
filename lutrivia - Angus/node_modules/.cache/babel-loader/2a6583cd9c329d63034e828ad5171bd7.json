{"ast":null,"code":"var _jsxFileName = \"/Users/mikecthurgood/Development/mod4/lutrivia-react-dumbo-web-051319/lutrivia/src/App.js\";\nimport React from 'react';\nimport SETTINGS from \"./settings\";\nimport { questions } from \"./data\";\nimport NewGameButton from \"./NewGameButton\";\nimport Score from \"./Score\";\nimport QuestionContainer from \"./containers/QuestionContainer\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      score: 0,\n      selectedQuestions: []\n    };\n\n    this.startNewGame = () => {\n      this.selectQuestions();\n      this.resetScore();\n    };\n\n    this.selectQuestions = () => {\n      const questionIndices = this.generateRandomQuestionIndices();\n      const selectedQuestions = questionIndices.map(index => {\n        return questions[index];\n      });\n      this.setState({\n        selectedQuestions\n      });\n    };\n\n    this.generateRandomQuestionIndices = () => {\n      const indices = [];\n\n      while (indices.length < SETTINGS.maxQuestions) {\n        const index = Math.floor(Math.random() * questions.length);\n        !indices.includes(index) && indices.push(index);\n      }\n\n      return indices;\n    };\n\n    this.resetScore = () => {\n      this.setState({\n        score: 0\n      });\n    };\n\n    this.incrementScore = () => {\n      this.setState(prevState => {\n        return {\n          score: ++prevState.score\n        };\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"Lutrivia\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(NewGameButton, {\n      startNewGame: this.startNewGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }), React.createElement(Score, {\n      score: this.state.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    })), React.createElement(QuestionContainer, {\n      questions: this.state.selectedQuestions,\n      incrementScore: this.incrementScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mikecthurgood/Development/mod4/lutrivia-react-dumbo-web-051319/lutrivia/src/App.js"],"names":["React","SETTINGS","questions","NewGameButton","Score","QuestionContainer","App","Component","state","score","selectedQuestions","startNewGame","selectQuestions","resetScore","questionIndices","generateRandomQuestionIndices","map","index","setState","indices","length","maxQuestions","Math","floor","random","includes","push","incrementScore","prevState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;;AAEA,MAAMC,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,KAAK,EAAE,CADD;AAENC,MAAAA,iBAAiB,EAAE;AAFb,KADwB;;AAAA,SAoBhCC,YApBgC,GAoBjB,MAAM;AACnB,WAAKC,eAAL;AACA,WAAKC,UAAL;AACD,KAvB+B;;AAAA,SAyBhCD,eAzBgC,GAyBd,MAAM;AACtB,YAAME,eAAe,GAAG,KAAKC,6BAAL,EAAxB;AACA,YAAML,iBAAiB,GAAGI,eAAe,CAACE,GAAhB,CAAoBC,KAAK,IAAI;AACrD,eAAOf,SAAS,CAACe,KAAD,CAAhB;AACD,OAFyB,CAA1B;AAGA,WAAKC,QAAL,CAAc;AAAER,QAAAA;AAAF,OAAd;AACD,KA/B+B;;AAAA,SAiChCK,6BAjCgC,GAiCA,MAAM;AACpC,YAAMI,OAAO,GAAG,EAAhB;;AACA,aAAOA,OAAO,CAACC,MAAR,GAAiBnB,QAAQ,CAACoB,YAAjC,EAA+C;AAC7C,cAAMJ,KAAK,GAAGK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBtB,SAAS,CAACkB,MAArC,CAAd;AACA,SAACD,OAAO,CAACM,QAAR,CAAiBR,KAAjB,CAAD,IAA4BE,OAAO,CAACO,IAAR,CAAaT,KAAb,CAA5B;AACD;;AACD,aAAOE,OAAP;AACD,KAxC+B;;AAAA,SA0ChCN,UA1CgC,GA0CnB,MAAM;AACjB,WAAKK,QAAL,CAAc;AAAET,QAAAA,KAAK,EAAE;AAAT,OAAd;AACD,KA5C+B;;AAAA,SA8ChCkB,cA9CgC,GA8Cf,MAAM;AACrB,WAAKT,QAAL,CAAcU,SAAS,IAAI;AACzB,eAAO;AAAEnB,UAAAA,KAAK,EAAE,EAAEmB,SAAS,CAACnB;AAArB,SAAP;AACD,OAFD;AAGD,KAlD+B;AAAA;;AAMhCoB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAe,MAAA,YAAY,EAAE,KAAKlB,YAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFF,EAME,oBAAC,iBAAD;AAAmB,MAAA,SAAS,EAAE,KAAKD,KAAL,CAAWE,iBAAzC;AAA4D,MAAA,cAAc,EAAE,KAAKiB,cAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF;AAWD;;AAlB+B;;AAsDlC,eAAerB,GAAf","sourcesContent":["import React from 'react';\nimport SETTINGS from \"./settings\";\nimport { questions } from \"./data\";\nimport NewGameButton from \"./NewGameButton\";\nimport Score from \"./Score\";\nimport QuestionContainer from \"./containers/QuestionContainer\";\n\nclass App extends React.Component {\n  state = {\n    score: 0,\n    selectedQuestions: []\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Lutrivia</h1>\n        <div>\n          <NewGameButton startNewGame={this.startNewGame} />\n          <Score score={this.state.score} />\n        </div>\n        <QuestionContainer questions={this.state.selectedQuestions} incrementScore={this.incrementScore} />\n        {/* <ScoreForm /> */}\n      </div>\n    );\n  }\n\n  startNewGame = () => {\n    this.selectQuestions();\n    this.resetScore();\n  }\n\n  selectQuestions = () => {\n    const questionIndices = this.generateRandomQuestionIndices();\n    const selectedQuestions = questionIndices.map(index => {\n      return questions[index];\n    });\n    this.setState({ selectedQuestions });\n  }\n\n  generateRandomQuestionIndices = () => {\n    const indices = [];\n    while (indices.length < SETTINGS.maxQuestions) {\n      const index = Math.floor(Math.random() * questions.length);\n      !indices.includes(index) && indices.push(index);\n    }\n    return indices;\n  }\n\n  resetScore = () => {\n    this.setState({ score: 0 });\n  }\n\n  incrementScore = () => {\n    this.setState(prevState => {\n      return { score: ++prevState.score }\n    });\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}